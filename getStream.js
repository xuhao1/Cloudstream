// Generated by CoffeeScript 1.7.1
(function() {
  var cb, cluster, http, machine, opt, port, proc, run, speed, update;

  http = require("http");

  opt = {
    host: "202.38.88.62",
    path: "/wm/core/switch/00:00:00:00:00:00:00:01/port/json",
    port: 8010
  };

  cb = function(res) {
    var str;
    str = '';
    res.on('data', function(chunk) {
      return str = str + chunk;
    });
    return res.on('end', function(chunk) {
      return proc(str);
    });
  };

  cluster = {};

  speed = {};

  port = (function() {
    function port(name) {
      this.name = name;
      this.speed = 0;
      this.last = {};
    }

    port.prototype.update = function(aport) {
      this.speed = aport['transmitBytes'] + aport['receiveBytes'] - this.last['transmitBytes'] - this.last['receiveBytes'];
      return this.last = aport;
    };

    return port;

  })();

  machine = (function() {
    function machine(name) {
      this.name = name;
      this.ports = {};
      this.speed = 0;
    }

    machine.prototype.update = function(portlist) {
      var aport, i, name, _i, _len;
      for (_i = 0, _len = portlist.length; _i < _len; _i++) {
        aport = portlist[_i];
        name = aport["portNumber"];
        if (this.ports[name] === void 0) {
          this.ports[name] = new port(name);
          this.ports[name].last = aport;
        } else {
          this.ports[name].update(aport);
        }
      }
      this.speed = 0;
      i = 0;
      for (port in this.ports) {
        this.speed += this.ports[port].speed;
        speed[i] = this.ports[port].speed;
        i++;
      }
      return console.log(this.speed);
    };

    return machine;

  })();

  proc = function(str) {
    var json, name, _results;
    json = eval("(" + str + ")");
    _results = [];
    for (name in json) {
      if (cluster[name] === void 0) {
        cluster[name] = new machine(name);
      }
      _results.push(cluster[name].update(json[name]));
    }
    return _results;
  };

  run = function() {
    var a;
    a = http.request(opt, cb);
    return a.end();
  };

  setInterval(run, 1000);

  update = function(socket) {
    var data;
    data = {
      'speed': speed
    };
    return socket.send(JSON.stringify(data));
  };

  exports.update = update;

}).call(this);
